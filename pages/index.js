Grid; /** @format */

import Head from "next/head";
import Layout from "../components/Layout";
import {
  Container,
  Row,
  Col,
  Text,
  Grid,
  Card,
  Checkbox,
  Input,
  Navbar,
  Dropdown,
  Button,
  Collapse,
  Image,
  Spacer,
  Switch,
  changeTheme,
  useTheme,
  Table,
  Modal,
  useModal,
} from "@nextui-org/react";
import { Hero } from "../components/Hero";
import Bootstrap1 from "../components/Bootstrap1";
import { useState } from "react";

export default function Home() {
  const { setVisible, bindings } = useModal();
  const [cual, setCual] = useState();
  console.log(cual);
  const Modals = (e) => {
    setCual(e.target.value);
    setVisible(true);
  };
  return (
    <div>
      <Head>
        <title>Solid</title>
        <meta name="description" content="Generated by create next app" />
        <meta charset="UTF-8" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Grid.Container>
          <Hero
            clase={"hero1"}
            titulo={"ESMA"}
            desc={"Avenida del Libertador 8151, CABA."}
          />
        </Grid.Container>
        <Grid.Container css={{ mt: "50px", mb: "50px" }}>
          <Grid justify="center" xs={12} sm={6} md={6}>
            <Card css={{ mw: "330px" }}>
              <Card.Header>
                <Text b>¿Que son los principios SOLID?</Text>
              </Card.Header>
              <Card.Divider />
              <Card.Body css={{ py: "$10" }}>
                <Text>
                  Los principios SOLID, pueden o no ser aplicados en el
                  desarrollo de software, su función es eliminar malos diseños y
                  así evitar la refactorización del código fuente hasta que sea
                  legible y extensible, es decir, evitar la deuda técnica.
                </Text>
              </Card.Body>
              <Card.Divider />
            </Card>
          </Grid>
          <Grid justify="center" xs={12} sm={6} md={6}>
            <Card css={{ mw: "330px" }}>
              <Card.Header>
                <Text b>¿Que es la deuda técnica?</Text>
              </Card.Header>
              <Card.Divider />
              <Card.Body css={{ py: "$10" }}>
                <Text>
                  La deuda técnica se genera cuando se utiliza una manera que no
                  es la mejor o más optimizada para llegar a un resultado
                  particular, hay distintos tipos de deuda técnica.
                </Text>
              </Card.Body>
              <Card.Divider />
            </Card>
          </Grid>
        </Grid.Container>
        <Grid.Container>
          <Grid justify="center" xs={12} sm={12} md={12}>
            <Table
              aria-label="Example table with static content"
              css={{
                height: "auto",
                minWidth: "100%",
              }}
            >
              <Table.Header css={{ background: "red" }}>
                <Table.Column>Nombre</Table.Column>
                <Table.Column>Description</Table.Column>
              </Table.Header>
              <Table.Body>
                <Table.Row key="1">
                  <Table.Cell>Imprudente</Table.Cell>
                  <Table.Cell>
                    Actúa de forma consciente e imprudente,copiar y pegar, no
                    hay tiempo.
                  </Table.Cell>
                </Table.Row>
                <Table.Row key="2">
                  <Table.Cell>Inadvertida</Table.Cell>
                  <Table.Cell>
                    Desconocimiento o falta de experiencia, generada normalmente
                    por un junior.
                  </Table.Cell>
                </Table.Row>
                <Table.Row key="3">
                  <Table.Cell>Prudente</Table.Cell>
                  <Table.Cell>
                    Sabemos que existe y que si no se paga a tiempo vamos a
                    tener más intereses.
                  </Table.Cell>
                </Table.Row>
                <Table.Row key="4">
                  <Table.Cell>Prudente e inadvertida</Table.Cell>
                  <Table.Cell>
                    Conocimiento total, no nos vamos a dar cuenta hasta que
                    avancemos en el proyecto.
                  </Table.Cell>
                </Table.Row>
              </Table.Body>
            </Table>
          </Grid>
        </Grid.Container>
        <Grid.Container justify="center" css={{ mt: "50px", mb: "50px" }} gap={20}>
          <Grid justify="center" xs={12} sm={1} md={1}>
            <Button
              auto
              shadow
              color="secondary"
              value={"comentarios"}
              onPress={Modals}
            >
              Comentarios
            </Button>
            <Modal
              scroll
              width="800px"
              aria-labelledby="modal-title"
              aria-describedby="modal-description"
              {...bindings}
            >
              <Modal.Header>
                {cual === "comentarios" ? (
                  <Text> ¿Como utilizar los comentarios? </Text>
                ) : cual === "Solid" ? (
                  <Text> ¿Que significa solid? </Text>
                ) : cual === "definiciones" ? (
                  <Text>Definiciones importantes</Text>
                ) : (
                  <Text>Variables</Text>
                )}
              </Modal.Header>
              <Modal.Body>
                <Text>
                  {cual === "comentarios" ? (
                    <Text>
                      {" "}
                      Los comentarios tienen que decir porque eligió por ese
                      camino y no por otra cosas, de esta manera una persona que
                      lee nuestro código sabe por qué utilizamos esa manera. Si
                      haces un puente no tenes que comentar como lo hiciste o
                      para qué sirve cada cosa sino tenes que decir porque
                      elegiste hacerlo así y no de otra manera.{" "}
                    </Text>
                  ) : cual === "Solid" ? (
                    <Text>
                      {" "}
                      <ol>
                        <li>
                           S = Single Responsibility Principle (SRP) (principio
                          de responsabilidad)
                        </li>
                        <li>
                           O = Open/Closed Principle (OCP)(abierto/cerrado)
                        </li>
                        <li>
                           L = Liskov Substitution Principle (LSP) (principio
                          de sustitución liskov)
                        </li>
                        <li>
                           I = Interface Segregation Principle (ISP)(principio
                          de segregación de información)
                        </li>
                        <li>
                           D = Dependency Inversion Principle (DIP)(Principio
                          de inversión de la dependencia)
                        </li>
                      </ol>{" "}
                    </Text>
                  ) : cual === "definiciones" ? (
                      <ol>
                        <li>
                           Responsabilidad única = Cada clase tiene su función
                          única e independiente de demás variables.
                        </li>
                        <li>
                           Refactorizar, que aunque a veces no es más fácil
                          pero lo que hace es que sea más fácil entenderlo o
                          leerlo después.
                        </li>
                        <li> No usar abreviaturas.</li>
                        <li>
                           Primero crear una interface con los datos y los
                          tipos que son por ej.
                        </li>
                        <li> name:string</li>
                        <li>
                           Después hay que desestructurar el estructurador y
                          pasarle directamente los valores de la Interface
                        </li>
                        <li> Intentar evitar las extensiones</li>
                        <li>
                           dividir el código en diferentes partes así cada una
                          cumple una función diferente y único
                        </li>
                        <li> código limpio</li>
                      </ol>
                  ) : (
                    <div>
                      <Text>Los nombres de las variables deben ser:</Text>
                      <ol>
                        <li>Pronunciables y expresivos</li>
                        <li>Deben estar en inglés y ser pronunciables, sin ahorrarnos caracteres en nombres</li>
                        <li>Que no contengan información técnica</li>
                        <li>Expresivos en la función que se cumple, ya que si este nombre no hace referencia a la función el desarrollador ni quien lea el código va a entender</li>
                      </ol>
                    </div>
                  )}
                </Text>
              </Modal.Body>
              <Modal.Footer>
                <Button
                  auto
                  flat
                  color="error"
                  onClick={() => setVisible(false)}
                >
                  Close
                </Button>
              </Modal.Footer>
            </Modal>
          </Grid>
          <Grid justify="center" xs={12} sm={1} md={1}>
            <Button
              auto
              shadow
              color="secondary"
              value={"Solid"}
              onPress={Modals}
            >
              Solid
            </Button>
          </Grid>
          <Grid justify="center" xs={12} sm={1} md={1}>
            <Button
              auto
              shadow
              color="secondary"
              value={"definiciones"}
              onPress={Modals}
            >
              Definiciones importantes
            </Button>
          </Grid>
          <Grid justify="center" xs={12} sm={1} md={1}>
            <Button
              auto
              shadow
              color="secondary"
              value={"Variables"}
              onPress={Modals}
            >
              Variables
            </Button>
          </Grid>
        </Grid.Container>
      </Layout>
    </div>
  );
}
